# go
//	Kevin Chen (2017)
//	Patterns from Pike's Google I/O talk, "Go Concurrency Patterns"

//	Golang restoring sequencing after multiplexing

package main

import (
	"fmt"
	"time"
)

type Message struct {
	str   string
	block chan bool
}

func sendMessage(msg string) <-chan Message {
	c := make(chan Message)
	waitBlock := make(chan bool)
	go func() {
		for i := 0; ; i++ {
			c <- Message{fmt.Sprintf("%s-%d", msg, i), waitBlock}
			time.Sleep(time.Microsecond)
			<-waitBlock
		}
	}()
	return c

}

func hebing(ch1, ch2 <-chan Message) <-chan Message {
	hech := make(chan Message)
	go func() {
		for {
			hech <- <-ch1
		}
	}()
	go func() {
		for {
			hech <- <-ch2
		}
	}()
	return hech
}
func main() {
	ch := hebing(sendMessage("chao"), sendMessage("sir"))
	for i := 0; i < 10000; i++ {
		msg1 := <-ch
		fmt.Println(msg1.str)
		msg2 := <-ch
		fmt.Println(msg2.str)
		msg1.block <- true // reset channel, stop blocking
		msg2.block <- true
	}
}

