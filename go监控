package main

import (
"fmt"
_	"log"
_	"os"
_	"io"
"context"
"time"
)

//var (
//	Info *log.Logger
//	Warning *log.Logger
//	Error * log.Logger
//)
//func init(){
//	errFile,err:=os.OpenFile("errors.log",os.O_CREATE|os.O_WRONLY|os.O_APPEND,0666)
//	if err!=nil{
//		log.Fatalln("打开日志文件失败：",err)
//	}
//	Info = log.New(os.Stdout,"Info:",log.Ldate | log.Ltime | log.Lshortfile)
//	Warning = log.New(os.Stdout,"Warning:",log.Ldate | log.Ltime | log.Lshortfile)
//	Error = log.New(io.MultiWriter(os.Stderr,errFile),"Error:",log.Ldate | log.Ltime | log.Lshortfile)
//}
//func main() {
//	Info.Println("飞雪无情的博客:","http://www.flysnow.org")
//	Warning.Printf("飞雪无情的微信公众号：%s\n","flysnow_org")
//	Error.Println("欢迎关注留言")
//	Info.Println("chao sir study logger")
//}
func main() {
	ctx, cancel := context.WithCancel(context.Background())
	go watch(ctx,"【监控1】")
	go watch(ctx,"【监控2】")
	go watch(ctx,"【监控3】")
	time.Sleep(10 * time.Second)
	fmt.Println("可以了，通知监控停止")
	cancel()
	//为了检测监控过是否停止，如果没有监控输出，就表示停止了
	time.Sleep(5 * time.Second)
}
func watch(ctx context.Context, name string) {
	for {
		select {
		case <-ctx.Done():
			fmt.Println(name,"监控退出，停止了...")
			return
		default:
			fmt.Println(name,"goroutine监控中...")
			time.Sleep(2 * time.Second)
		}
	}
}
